<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu修复引导</title>
    <url>/2017/03/06/ubuntu%E4%BF%AE%E5%A4%8D%E5%BC%95%E5%AF%BC/</url>
    <content><![CDATA[<p>首次以U盘方式安装Ubuntu16.04时，系统在开机时会让你选择进入Ubuntu还是Windows，后重新安装Ubuntu14.04的时候，就都是直接进入Ubuntu而没有选择项了。</p>
<h2 id="修复引导"><a href="#修复引导" class="headerlink" title="修复引导"></a>修复引导</h2><p>执行此命令后便会修复引导</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo update-grub</span><br></pre></td></tr></table></figure>

<h2 id="修改默认系统"><a href="#修改默认系统" class="headerlink" title="修改默认系统"></a>修改默认系统</h2><ol>
<li><p>打开&#x2F;etc&#x2F;default&#x2F;grub</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/default/grub</span><br></pre></td></tr></table></figure></li>
<li><p>修改默认系统<br>GRUB_DEFAULT&#x3D;4<br>我的Windows是第五个选择，所以值设置4默认便是选择Windows</p>
</li>
<li><p>执行更新</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo update-grub</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h2><blockquote>
<p><a href="http://kwangka.github.io/2015/11/23/dualbootgrub/">http://kwangka.github.io/2015/11/23/dualbootgrub/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>TextInputEditText样式设置</title>
    <url>/2016/09/18/android/TextInputEditText%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="TextInputEditText样式设置"><a href="#TextInputEditText样式设置" class="headerlink" title="TextInputEditText样式设置"></a>TextInputEditText样式设置</h1><p><code>TextInputEditText</code>是在<strong>Design</strong>包中<strong>MD</strong>风格的<code>EditText</code>。</p>
<h2 id="样式调整"><a href="#样式调整" class="headerlink" title="样式调整"></a>样式调整</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;InputStyle&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">   <span class="comment">&lt;!-- 底部线 默认颜色 --&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorControlNormal&quot;</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="comment">&lt;!-- 底部线 EditText激活时颜色 --&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorControlActivated&quot;</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="comment">&lt;!-- 设置光标 --&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:textCursorDrawable&quot;</span>&gt;</span>@drawable/line<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>android:textCursorDrawable</code>为<code>@null</code>时光标颜色与<code>textColor</code>相同，但是目测宽度只有1dp左右，太细了,所以最终还是选择了自定义光标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;@android:color/black&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:width</span>=<span class="string">&quot;2dip&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="取消底部线"><a href="#取消底部线" class="headerlink" title="取消底部线"></a>取消底部线</h2><p>如果要取消<code>TextInputEditText</code>底部线，在EditText中我们设置<code>background=@null</code>，但是<code>TextInputEditText</code>不同，我们需要将<code>TextInputLayout</code>和<code>TextInputEdit</code>的<code>backgound</code>都设置为<code>@null</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">android.support.design.widget.TextInputEditText</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:hint</span>=<span class="string">&quot;请输入手机号码&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:padding</span>=<span class="string">&quot;8dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Widget</tag>
        <tag>Style</tag>
      </tags>
  </entry>
  <entry>
    <title>利用面向对象来讲解事件分发与上传</title>
    <url>/2016/10/24/android/%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%88%86%E5%8F%91%E4%B8%8E%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>首先先来看下基本的套路，第一次看完事件分发后通常是懵逼，但我觉得还是应该先看下。</p>
<p>Android 中当系统捕获事件时，都是由最外层的<code>View</code>依次向下传递，当然，事件不能总是传递到最后一子View才结束，我们在每一级消息传递时都会对消息做出响应以决定继续分发或者拦截。<br><br></p>
<table>
<thead>
<tr>
<th>Touch事件相关方法</th>
<th align="center">方法功能</th>
<th align="center">View</th>
<th align="center">ViewGroup</th>
<th align="center">Activity</th>
</tr>
</thead>
<tbody><tr>
<td>dispatchTouchEvent</td>
<td align="center">事件调度</td>
<td align="center">o</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td>onInterceptTouchEvent</td>
<td align="center">事件拦截</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
<tr>
<td>onTouchEvent</td>
<td align="center">事件响应</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td><br></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<span id="more"></span>

<blockquote>
<p>Tips</p>
<ol>
<li>表格中的<code>View</code>指的是<strong>不包含</strong>任何子<code>View</code>的<code>View</code>，例如<code>TextView</code>、<code>Button</code></li>
<li><code>View</code>本身是有<code>dispatchTouchEvent</code>方法的，但是由于没有子<code>View</code>,也就没有可分发的目标了</li>
<li>下文中提到的事件消费，均表示事件终结，及在这之后，既不会发送分发，也不会上传</li>
</ol>
</blockquote>
<h3 id="事件调度-dispatchTouchEvent"><a href="#事件调度-dispatchTouchEvent" class="headerlink" title="事件调度 dispatchTouchEvent"></a>事件调度 dispatchTouchEvent</h3><p><code>return true;</code> 事件已被消费，事件结束。<br><code>retrun false;</code> 事件不再继续分发，呼叫上层控件对其进行消费。<br><code>return super.dispatchTouchEvent(ev);</code> 事件分发，将被传递到<code>onInterceptTouchEvent</code>进行处理，（如果是<code>Activity</code>，则直接向下传递）</p>
<blockquote>
<p>Tips<br>事件分发本身也对事件进行消费</p>
</blockquote>
<h3 id="事件拦截-onInterceptTouchEvent"><a href="#事件拦截-onInterceptTouchEvent" class="headerlink" title="事件拦截 onInterceptTouchEvent"></a>事件拦截 onInterceptTouchEvent</h3><p>此方法只在ViewGroup中存在<br><code>return true;</code> 对事件进行拦截，并交由本层控件的<code>onTouchEvent</code>对事件进行处理<br><code>retrun false;</code> 不对事件进行拦截，向下分发，传递给子<code>View</code>的<code>dispatchTouchEvent</code>处理<br><code>return super.onInterceptTouchEvent(ev);</code> 默认等同于 <code>return true;</code> （既然是拦截器，默认功能当然是拦截啦）</p>
<h3 id="事件响应-onTouchEvent"><a href="#事件响应-onTouchEvent" class="headerlink" title="事件响应 onTouchEvent"></a>事件响应 onTouchEvent</h3><p><code>return true;</code> 事件已被消费，事件终结<br><code>return false;</code> 事件处理后又<strong>上传</strong>到上层<code>View</code>,交由上层的<code>View</code>的<code>onTouchEvent</code>进行处理<br><code>return super.onTouchEvent(ev);</code> 默认等同于 <code>return false;</code></p>
<h3 id="ViewGroup-事件流程图"><a href="#ViewGroup-事件流程图" class="headerlink" title="ViewGroup 事件流程图"></a>ViewGroup 事件流程图</h3><p>由于ViewGroup的事件是最全面的，所以图中只画了ViewGroup<br><img src="https://www.processon.com/chart_image/581bf20ce4b0c6fe570ca35e.png" alt="Flow"></p>
<blockquote>
<p>Thanks<br><a href="http://stackvoid.com/details-dispatch-onTouch-Event-in-Android/">Android 事件分发机制详解</a> (这网址现在已经不能用了，心好累)<br><a href="https://www.processon.com/">Processon 免费在线绘图</a></p>
</blockquote>
<p>&#x3D;&#x3D;&#x3D;</p>
<blockquote>
<p>Note<br>中发现<code>Activity</code> 默认只会将<strong>Down</strong>向下传递,而<strong>Move</strong>、<strong>Up</strong>会在<code>onTouchEvent</code>中消费，必须要将<strong>Down</strong>消费后，<strong>Move</strong>、<strong>Up</strong>才会向下传递</p>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul>
<li>老板 Activity<ol>
<li>主要是派发任务，也就是<code>dispatchTouchEvent</code></li>
<li><strong>秘书</strong> <code>onTouchEvent</code>(老板总不能所有事都亲历亲为，所以我们还得有个<strong>秘书</strong>)</li>
</ol>
</li>
<li>管理 ViewGroup<ol>
<li>项目经理 <code>dispatchTouchEvent</code> 也是派发任务</li>
<li>部门经理 <code>onInterceptTouchEvent</code> 用于评估项目经理提出的功能可行性及工时</li>
<li>技术经理 <code>onTouchEvent</code> 公司技术骨干，有难度的活找他们。</li>
</ol>
</li>
<li>码农 View<ol>
<li>onTouchEvent 由于码农是在公司的最低层，所以咱们没得选</li>
<li>dispatchTouchEvent 虽然这方法咱现在没用，但咱也总不能当一辈子码农啊</li>
</ol>
</li>
</ul>
<h3 id="明确功能"><a href="#明确功能" class="headerlink" title="明确功能"></a>明确功能</h3><ul>
<li>dispatchTouchEvent<ol>
<li><code>return true</code> 对应角色自己就将任务完成了</li>
<li><code>return false</code> 对应角色自己无法下决定，于是请求上级出面解决</li>
<li><code>return dispatchTouchEvent</code> 任务正常派发</li>
</ol>
</li>
<li>onInterceptTouchEvent<ol>
<li><code>return true/onInterceptTouchEvent</code> 对应角色认为任务不合理，将其驳回</li>
<li><code>return false</code> 任务合理，不驳回</li>
</ol>
</li>
<li>onTouchEvent <ol>
<li><code>return true</code> 任务执行完成，但没必要汇报上级</li>
<li><code>return false/super.onTouchEvent</code> 本职工作已完成，但你自己并不能决定任务是否已经完成，需要上级验收通过才算真正完成</li>
</ol>
</li>
</ul>
<h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><p>某天一位潜在客户来找到老板，说希望实现一个淘宝，预算<strong>5W</strong>，老板一听，虎躯一震，直接回绝客户,然后就没有下文了。</p>
<p>在这个案例中，老板自己就事情给处理了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Activity/老板 dispatchTouchEvent <span class="keyword">return</span> <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>

<h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><ol>
<li>某天一位潜在客户来找到老板，说希望实现一个淘宝，预算<strong>5000W</strong>，但是要1个月必须上线第一版，老板一听，时间紧了点，但加加班还是可以搞定的，很快便签好了合同，并将任务派发给了项目经理并特别要求这个项目一定要做好，</li>
<li>项目经理立马就将老板的指示传递给了部门经理</li>
<li>部分经理并没有提出异议，于是便将任务细化，派发给码农</li>
<li>码农表示自己一个月时间肯定做不完啊，于是便向技术经理需求帮助</li>
<li>一个月后，技术经理将第一版交到了老板的秘书手里</li>
<li>秘书将第一版拿给了老板，并且最终通过了客户验收</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Activity/老板 dispatchTouchEvent <span class="keyword">return</span> dispatchTouchEvent.</span><br><span class="line">ViewGroup/项目经理 dispatchTouchEvent <span class="keyword">return</span> dispatchTouchEvent.</span><br><span class="line">ViewGroup/部门经理 onInterceptTouchEvent <span class="keyword">return</span> <span class="literal">false</span>.</span><br><span class="line">View/码农 onTouchEvent <span class="keyword">return</span> <span class="literal">false</span>.</span><br><span class="line">ViewGroup/技术经理 onTouchEvent <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">Activity/老板秘书 onTouchEvent</span><br></pre></td></tr></table></figure>

<h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><ol>
<li>案例2中的客户想老板反映，希望网站的平均并发量可以达到100000&#x2F;s,老板变将这个任务交给了项目项目经理</li>
<li>项目经理由于对技术不是很熟悉，于是便直接将任务交给部门经理评估</li>
<li>部门经理收到任务后，认为此需求不合理，找到老板秘书后表示阿里双11的峰值瞬时并发量也不过50000&#x2F;s</li>
<li>老板秘书向老板传到了部门经理的意见</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Activity/老板 dispatchTouchEvent <span class="keyword">return</span> dispatchTouchEvent.</span><br><span class="line">ViewGroup/项目经理 dispatchTouchEvent <span class="keyword">return</span> dispatchTouchEvent.</span><br><span class="line">ViewGroup/部门经理 onInterceptTouchEvent <span class="keyword">return</span> <span class="literal">true</span>/onInterceptTouchEvent.</span><br><span class="line">Activity/老板秘书 onTouchEvent</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android Gradle 常用配置</title>
    <url>/2017/01/06/build-tool/Android-Gradle-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Gradle-常用配置"><a href="#Gradle-常用配置" class="headerlink" title="Gradle 常用配置"></a>Gradle 常用配置</h1><h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>当程序中使用了第三方的功能，比如分享、地图时，要求程序必须是已签名的<br>在<strong>Gradle</strong>中配置签名后，可以使我们的Debug也带上签名，而不需要使用<strong>Build&#x2F;Generate Signer Apk</strong>去编译带签名的APK</p>
<ul>
<li>build.gradle</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 Android &#123;&#125; 节点下增加</span></span><br><span class="line">signingConfigs &#123;</span><br><span class="line">	signConfig &#123;</span><br><span class="line">		storeFile file (<span class="string">&#x27;../key.jks&#x27;</span>)</span><br><span class="line">		storePassword <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">		keyAlias <span class="string">&#x27;xdj&#x27;</span></span><br><span class="line">		keyPassword <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">buildTypes &#123;</span><br><span class="line">	release &#123;</span><br><span class="line">		signingConfig signingConfigs.signConfig</span><br><span class="line">	&#125;</span><br><span class="line">	debug &#123;</span><br><span class="line">		signingConfig signingConfigs.signConfig <span class="comment">// 配置debug包的签名</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<ul>
<li>获得签名文件信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 终端命令</span><br><span class="line">keytool -list -v -keystore ./key.jks</span><br></pre></td></tr></table></figure>
<p>输出结果<br><img src="http://ww4.sinaimg.cn/large/9da81145gw1ez65rnuqydj20mf0a140k.jpg" alt="返回"></p>
<blockquote>
<p>Tips<br>还可通过在<strong>AndroidStudio</strong>自带<strong>终端</strong>中运行 <code>./gradlew signingReport</code>命令获取</p>
</blockquote>
<ul>
<li>获得<strong>APK</strong>签名信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 终端命令</span></span><br><span class="line">jarsigner -verify -certs -verbose ./app/build/outputs/apk/app-googleplay-debug.apk</span><br></pre></td></tr></table></figure>
<p>输出结果<br><img src="http://ww2.sinaimg.cn/large/9da81145gw1ez65ymnbp1j20fp02oq3f.jpg" alt="返回结果"></p>
<blockquote>
<p>Tips:<br> <strong>${keyAlias}<strong>为</strong>CN&#x3D;Android Debug</strong> 说明<strong>APK</strong>未签名</p>
</blockquote>
<h2 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h2><p>以友盟为例</p>
<ul>
<li>build.gradle</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">	manifestPlaceHolders=[<span class="attr">UMENG_CHANNEL_VALUE:</span><span class="string">&#x27;Umeng&#x27;</span>] <span class="comment">// 默认渠道为Umeng</span></span><br><span class="line">&#125;</span><br><span class="line">productFlavors &#123;</span><br><span class="line">	googleplay &#123;</span><br><span class="line">		manifestPlaceHolders=[<span class="attr">UMENG_CANNEL_VALUE:</span><span class="string">&#x27;Google Play&#x27;</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	wandoujia&#123;</span><br><span class="line">		manifestPlaceholders = [<span class="attr">UMENG_CHANNEL_VALUE:</span> <span class="string">&quot;Wandoujia&quot;</span>]</span><br><span class="line"><span class="comment">//		minSdkVersion 19</span></span><br><span class="line"><span class="comment">//		applicationId &#x27;com.rx.demo&#x27;</span></span><br><span class="line"><span class="comment">//		targetSdkVersion 22</span></span><br><span class="line"><span class="comment">//		versionCode 360</span></span><br><span class="line"><span class="comment">//		versionName &#x27;1.1.1&#x27;</span></span><br><span class="line"><span class="comment">//      signingConfig signingConfig.wandoujiaConfig</span></span><br><span class="line">	&#125;</span><br><span class="line">	xiaomi&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	tencent&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>manifest</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 替换为您应用的推广渠道名称，channel id自定义。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;UMENG_CHANNEL&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;$&#123;UMEMG_CHANNEL_VALUE&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编译命令<br><code>./gradlew assemble</code>: 编译所有渠道的Debug和Release<br><code>./gradlew assembleWandoujia</code>: 编译豌豆荚的Debug和Release<br><code>./gradlew assembleWandoujiaDebug</code>: 编译豌豆荚的Debug<br><code>./gradlew build</code>: <blockquote>
<p>Tips<br>貌似<code>Android Studio</code>上有多渠道打包的插件，但最终还是需要使用命令行</p>
</blockquote>
</li>
</ul>
<p>###自定义APK名称</p>
<ul>
<li>build.gradle</li>
</ul>
 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根节点下增加</span></span><br><span class="line"><span class="keyword">def</span> releaseTime() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">&quot;yyyy-MM-dd&quot;</span>, TimeZone.getTimeZone(<span class="string">&quot;UTC&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Android &#123;&#125; 节点下增加</span></span><br><span class="line"> buildTypes &#123;</span><br><span class="line">    applicationVariants.all &#123; variant -&gt;</span><br><span class="line">        variant.outputs.each &#123; output -&gt;</span><br><span class="line">            <span class="keyword">def</span> outputFile = output.outputFile</span><br><span class="line">            <span class="comment">// &amp;&amp; outputFile.name.indexOf(&#x27;debug&#x27;) == -1</span></span><br><span class="line">            <span class="keyword">if</span> (outputFile != <span class="literal">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">&#x27;.apk&#x27;</span>)</span><br><span class="line">                    &amp;&amp; outputFile.name.indexOf(<span class="string">&#x27;debug&#x27;</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="comment">// 输出apk名称为app-googleplay-release-v1.0-build1-2015-12-16</span></span><br><span class="line">                <span class="keyword">def</span> fileName = outputFile.name.replace(<span class="string">&quot;.apk&quot;</span>, <span class="string">&quot;-v$&#123;defaultConfig.versionName&#125;-build$&#123;defaultConfig.versionCode&#125;-&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;$&#123;releaseTime()&#125;.apk&quot;</span>)</span><br><span class="line">                output.outputFile = <span class="keyword">new</span> File(outputFile.parent, fileName)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><h3 id="导入aar、jar、modle"><a href="#导入aar、jar、modle" class="headerlink" title="导入aar、jar、modle"></a>导入aar、jar、modle</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">	compile fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>]) <span class="comment">// 导入libs文件夹中所有的jar包</span></span><br><span class="line">	compile <span class="string">&#x27;group:name:version&#x27;</span></span><br><span class="line">	compile <span class="string">&#x27;group:name:1.1.+&#x27;</span></span><br><span class="line">	compile(<span class="attr">group:</span><span class="attr">name:</span>version) &#123;</span><br><span class="line">		exclude <span class="attr">module:</span> <span class="string">&#x27;support-v4&#x27;</span> <span class="comment">// 发生冲突时，排除v4</span></span><br><span class="line">	&#125;</span><br><span class="line">	compile(<span class="attr">name:</span><span class="string">&#x27;xxx&#x27;</span>, <span class="attr">ext:</span><span class="string">&#x27;aar&#x27;</span>) <span class="comment">// aar包是用来替换jar的文件类型</span></span><br><span class="line">	compile project(:modle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips<br><code>+</code> 表示最新的版本号，曾经遇到过在<strong>Windows</strong>下导入包是输入的时准确的版本号<code>1.0.0</code>没有问题，到了<code>Mac</code>上的就提示找不到包，后来改成 <code>1.0.+</code>就好了</p>
</blockquote>
<h3 id="导入-so"><a href="#导入-so" class="headerlink" title="导入 *.so"></a>导入 *.so</h3><ul>
<li>Android Studio 默认路径：<code>Project</code>视图模式下<code>./app/src/main/jniLibs</code><br>这是我目前使用的方法，直接把so包放入文件夹即可，不需要其他操作<br><img src="http://ww3.sinaimg.cn/large/9da81145gw1ez05ymejwyj20b608n3yz.jpg" alt="so包默认存放路径"></li>
<li>自定义路径<br>在<strong>Eclipse</strong>中的习惯是讲so包放入<strong>libs</strong>文件夹中，这在<strong>Android Studio</strong>中也可以通过配置<strong>Gradle</strong>实现<br>build.gradle<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 Android&#123;&#125; 节点下增加</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">	main &#123;</span><br><span class="line"><span class="comment">//		jniLibs.srcDirs=[&#x27;./libs&#x27;]</span></span><br><span class="line">	    jniLibs.srcDirs=[<span class="string">&#x27;./libs/jniLibs&#x27;</span>]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul>
<li>下载源码及文档</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">idea &#123;</span><br><span class="line">    module &#123;</span><br><span class="line">        downloadSources = true</span><br><span class="line">        downloadJavadoc = false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eclipse &#123;</span><br><span class="line">    classpath &#123;</span><br><span class="line">        downloadSources = true</span><br><span class="line">        downloadJavadoc = false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整build-gradle"><a href="#完整build-gradle" class="headerlink" title="完整build.gradle"></a>完整build.gradle</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> releaseTime() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">&quot;yyyy-MM-dd&quot;</span>, TimeZone.getTimeZone(<span class="string">&quot;UTC&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">22</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;23.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        signConfig &#123;</span><br><span class="line">            storeFile file (<span class="string">&quot;../key.jks&quot;</span>)</span><br><span class="line">            storePassword  <span class="string">&quot;123456&quot;</span></span><br><span class="line">            keyAlias <span class="string">&quot;xdj&quot;</span></span><br><span class="line">            keyPassword <span class="string">&quot;123456&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.xdj.rxjavademo&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">22</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"></span><br><span class="line">        manifestPlaceholders=[<span class="attr">UMENG_CHANNEL_VALUE:</span> <span class="string">&#x27;Umeng&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">            signingConfig signingConfigs.signConfig</span><br><span class="line">            zipAlignEnabled <span class="literal">true</span></span><br><span class="line"><span class="comment">//            shrinkResources true // 清除无用的resource</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            buildConfigField <span class="string">&quot;boolean&quot;</span>, <span class="string">&quot;LOG_DEBUG&quot;</span>, <span class="string">&quot;false&quot;</span> <span class="comment">// 设置是否打印LOG，貌似没效果</span></span><br><span class="line">            signingConfig signingConfigs.signConfig</span><br><span class="line">        &#125;</span><br><span class="line">        applicationVariants.all &#123; variant -&gt;</span><br><span class="line">            variant.outputs.each &#123; output -&gt;</span><br><span class="line">                <span class="keyword">def</span> outputFile = output.outputFile</span><br><span class="line">                <span class="comment">// &amp;&amp; outputFile.name.indexOf(&#x27;debug&#x27;) == -1</span></span><br><span class="line">                <span class="keyword">if</span> (outputFile != <span class="literal">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">&#x27;.apk&#x27;</span>)</span><br><span class="line">                        &amp;&amp; outputFile.name.indexOf(<span class="string">&#x27;debug&#x27;</span>) == <span class="number">-1</span>) &#123; <span class="comment">// 不对Debug进行重命名</span></span><br><span class="line">                    <span class="comment">// 输出apk名称为app-googleplay-release-2015-12-16-v1.0-build1</span></span><br><span class="line">                    <span class="keyword">def</span> fileName = outputFile.name.replace(<span class="string">&quot;.apk&quot;</span>, <span class="string">&quot;-$&#123;releaseTime()&#125;&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;-v$&#123;defaultConfig.versionName&#125;-build$&#123;defaultConfig.versionCode&#125;&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;.apk&quot;</span>)</span><br><span class="line">                    output.outputFile = <span class="keyword">new</span> File(outputFile.parent, fileName)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        googleplay &#123;</span><br><span class="line">            manifestPlaceholders = [<span class="attr">UMENG_CHANNEL_VALUE:</span> <span class="string">&quot;Google Play&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        xiaomi &#123;</span><br><span class="line"><span class="comment">//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;Xiao Mi&quot;]</span></span><br><span class="line">        &#125;</span><br><span class="line">        _360 &#123;</span><br><span class="line"><span class="comment">//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;360&quot;]</span></span><br><span class="line"><span class="comment">//            minSdkVersion 19</span></span><br><span class="line"><span class="comment">//            applicationId &#x27;com.rx.demo&#x27;</span></span><br><span class="line"><span class="comment">//            targetSdkVersion 22</span></span><br><span class="line"><span class="comment">//            versionCode 360</span></span><br><span class="line"><span class="comment">//            versionName &#x27;1.1.1&#x27;</span></span><br><span class="line"><span class="comment">//            signingConfig signingConfig._360Config</span></span><br><span class="line">        &#125;</span><br><span class="line">        tencent &#123;</span><br><span class="line"><span class="comment">//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;Tencent&quot;]</span></span><br><span class="line">        &#125;</span><br><span class="line">        baidu &#123;</span><br><span class="line"><span class="comment">//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;Baidu&quot;]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs=[<span class="string">&#x27;./libs/jniLibs&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line">    testCompile <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;com.android.support:appcompat-v7:22.2.1&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;com.android.support:design:22.2.1&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;io.reactivex:rxjava:1.1.0&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;io.reactivex:rxandroid:1.1.0&#x27;</span></span><br><span class="line">    <span class="comment">//    compile (&#x27;cn.trinea.android.view.autoscrollviewpager:android-auto-scroll-view-pager:1.1.2&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//        exclude module: &#x27;support-v4&#x27;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    compile <span class="string">&#x27;com.android.support:recyclerview-v7:22.2.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="gradle-bin镜像地址"><a href="#gradle-bin镜像地址" class="headerlink" title="gradle bin镜像地址"></a>gradle bin镜像地址</h2><p><a href="https://mirrors.aliyun.com/macports/distfiles/gradle/">https://mirrors.aliyun.com/macports/distfiles/gradle/</a></p>
]]></content>
      <categories>
        <category>Android</category>
        <category>build-tool</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Guava BloomFilter</title>
    <url>/2024/05/04/java/Guava%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">expectedInsertions</span> <span class="operator">=</span> <span class="number">100_0000</span>; <span class="comment">// 预估数据量</span></span><br><span class="line"><span class="type">double</span> <span class="variable">fpp</span> <span class="operator">=</span> <span class="number">0.0001</span>; <span class="comment">// 期望的误差率 0.01%</span></span><br><span class="line">BloomFilter&lt;String&gt; bloomFilter = BloomFilter.create(Funnels.stringFunnel(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)), expectedInsertions, fpp);</span><br><span class="line"></span><br><span class="line">bloomFilter.put(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否存在，false则表示一定不存在； true表示可能存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> bloomFilter.mightContain(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">System.out.println(ans);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>资料<br><a href="https://blog.csdn.net/qq_51721904/article/details/125454821">十亿数据如何去重，红黑树到hash再到布隆过滤器</a><br><a href="https://www.cnblogs.com/weisenz/p/4347508.html">Google Guava 中布隆过滤器的介绍和使用 </a><br><a href="https://krisives.github.io/bloom-calculator/">Bloom Filter Calculator</a><br><a href="https://hur.st/bloomfilter/">Bloom Filter Calculator</a>  </p>
</blockquote>
]]></content>
      <categories>
        <category>Guava</category>
        <category>Bloom Filters</category>
      </categories>
      <tags>
        <tag>Guava</tag>
        <tag>Bloom Filters</tag>
      </tags>
  </entry>
  <entry>
    <title>Java计算对象占用的内存大小</title>
    <url>/2024/04/27/java/Java%E8%AE%A1%E7%AE%97%E5%AF%B9%E8%B1%A1%E5%8D%A0%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<ol>
<li>引入jar包<ul>
<li><p>Gradle</p>
 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&quot;com.carrotsearch:java-sizeof:$&#123;javaSizeOf&#125;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Maven</p>
 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="attr">https:</span><span class="comment">//mvnrepository.com/artifact/com.carrotsearch/java-sizeof --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.carrotsearch&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;java-sizeof&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.0</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>代码 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arrays = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">100_0000</span>];</span><br><span class="line">System.out.println(<span class="string">&quot;占用内存：&quot;</span> + RamUsageEstimator.humanSizeOf(arrays));</span><br></pre></td></tr></table></figure>
 执行后输出结果 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">占用内存：3.8 MB</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>GitPage自定义域名不安全</title>
    <url>/2024/04/20/git-page/GitPage%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>GitPage设置自定义域名后，浏览器会提示不安全</p>
<!-- ![6W74KIZkrjabuez](https://s2.loli.net/2024/04/21/6W74KIZkrjabuez.png) -->
<img src="https://s2.loli.net/2024/04/21/6W74KIZkrjabuez.png" width="40%" />

<span id="more"></span>
<h2 id="检查域名的DNS设置是否正确"><a href="#检查域名的DNS设置是否正确" class="headerlink" title="检查域名的DNS设置是否正确"></a>检查域名的DNS设置是否正确</h2><ol>
<li>进入<code>Git Page</code>的仓库</li>
<li>点击<code>Settings</code></li>
<li>在边栏的“代码和自动化”部分中，单击“ Pages”。</li>
<li>在“ Custom domain”下，查看域名是否正确<br><img src="https://s2.loli.net/2024/04/21/O7P9juatZAHn5U3.png" alt="O7P9juatZAHn5U3"></li>
</ol>
<h2 id="重新设置域名的DNS"><a href="#重新设置域名的DNS" class="headerlink" title="重新设置域名的DNS"></a>重新设置域名的DNS</h2><table>
<thead>
<tr>
<th>Scenario</th>
<th>DNS record type</th>
<th>DNS record name</th>
<th>DNS record value(s)</th>
</tr>
</thead>
<tbody><tr>
<td>Apex domain<br />(<code>example.com</code>)</td>
<td><code>A</code></td>
<td><code>@</code></td>
<td><code>185.199.108.153</code><br /><code>185.199.109.153</code><br /><code>185.199.110.153</code><br /><code>185.199.111.153</code></td>
</tr>
<tr>
<td>Apex domain<br />(<code>example.com</code>)</td>
<td><code>AAAA</code></td>
<td><code>@</code></td>
<td><code>2606:50c0:8000::153</code><br /><code>2606:50c0:8001::153</code><br /><code>2606:50c0:8002::153</code><br /><code>2606:50c0:8003::153</code></td>
</tr>
<tr>
<td>Apex domain<br />(<code>example.com</code>)</td>
<td><code>ALIAS</code> or <code>ANAME</code></td>
<td><code>@</code></td>
<td><code>USERNAME.github.io</code> or<br /> <code>ORGANIZATION.github.io</code></td>
</tr>
<tr>
<td>Subdomain<br />(<code>ww​w.example.com</code>,<br /><code>blog.example.com</code>)</td>
<td><code>CNAME</code></td>
<td><code>SUBDOMAIN</code></td>
<td><code>USERNAME.github.io</code> or<br /> <code>ORGANIZATION.github.io</code></td>
</tr>
</tbody></table>
<p>修改完后再检查自定义域名的DNS设置是否正确<br><img src="https://s2.loli.net/2024/04/21/G3IheqKZd7NCkoS.png" alt="G3IheqKZd7NCkoS"></p>
<p>访问自定义域名，发现依然不安全，等待DNS生效，一般需要24小时，可使用<code>dig</code>命令或者DNS在线解析工具确认DNS是否生效</p>
<ol>
<li>dig命令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dig nide.name</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; nide.name</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 47330</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 1408</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;nide.name.			IN	A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">nide.name.		1	IN	A	192.30.252.154</span></span><br><span class="line"><span class="string">nide.name.		1	IN	A	192.30.252.153</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 5 msec</span></span><br><span class="line"><span class="string">;; SERVER: 192.168.2.1#53(192.168.2.1)</span></span><br><span class="line"><span class="string">;; WHEN: Sun Apr 21 00:16:21 CST 2024</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 70</span></span><br></pre></td></tr></table></figure></li>
<li>在线DNS解析工具<br><img src="https://s2.loli.net/2024/04/21/CZGdvcuFjEx3VKw.png" alt="CZGdvcuFjEx3VKw"></li>
</ol>
<p>可以看到IPV4的A记录部分DNS服务商已经生效。将电脑的 DNS 修改为已经生效的 DNS 服务商，再访问自定义域名。<br>例如我这 Google DNS 已经是修改后 DNS IP 了,将电脑 DNS 修改为<code>8.8.8.8</code>。再次访问自定义域名，发现已经是安全的了。<br>剩下的DNS服务商生效后，再将电脑的 DNS 修改为默认的DNS服务商即可。</p>
<blockquote>
<p>参考<br><a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/securing-your-github-pages-site-with-https#troubleshooting-certificate-provisioning-certificate-not-yet-created-error">使用 HTTPS 保护 GitHub Pages 站点</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Hexo版本升级</title>
    <url>/2019/10/27/git-page/Hexo%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="先升级Node-js到最新版"><a href="#先升级Node-js到最新版" class="headerlink" title="先升级Node.js到最新版"></a>先升级Node.js到最新版</h2><p>这里推荐使用<code>nvm</code>安装最新版<code>node</code></p>
<h2 id="升级Hexo"><a href="#升级Hexo" class="headerlink" title="升级Hexo"></a>升级Hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装hexo-cli命令行工具</span></span><br><span class="line">$ npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装npm-check </span></span><br><span class="line">$ npm install -g npm-check</span><br><span class="line"><span class="comment"># 检查npm依赖包是否有更新</span></span><br><span class="line">$ npm-check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装npm包更新工具</span></span><br><span class="line">$ npm install -g npm-upgrade</span><br><span class="line"><span class="comment"># 更新package.json、node-modules</span></span><br><span class="line">$ npm-upgrade -g</span><br><span class="line">$ npm-upgrade -save</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<blockquote>
<p>参考<br><a href="https://leimingshan.com/posts/d9017f30/">Hexo升级指南</a><br><a href="https://baize.cc/posts/15ac.html">Hexo版本升级指南</a></p>
</blockquote>
<h3 id="可能出现的异常"><a href="#可能出现的异常" class="headerlink" title="可能出现的异常"></a>可能出现的异常</h3><ul>
<li>npm install -g hexo-cli<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">npm ERR! code CERT_HAS_EXPIRED</span><br><span class="line">npm ERR! errno CERT_HAS_EXPIRED</span><br><span class="line">npm ERR! request to https://registry.npm.taobao.org/hexo-cli failed, reason: certificate has expired</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/xdj/.npm/_logs/2024-04-19T01_08_00_873Z-debug.log</span><br></pre></td></tr></table></figure>
此情况是之前配置的<code>npm</code>源证书过期，需要更换新的源。<br><code>npm config set registry https://registry.npmmirror.com</code></li>
</ul>
<blockquote>
<p>参考<br><a href="https://blog.csdn.net/qq_49907632/article/details/135974644">npm ERR! reason: certificate has expired（淘宝镜像过期）</a></p>
</blockquote>
<ul>
<li>npm-upgrade<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm-upgrade</span><br><span class="line">Checking <span class="keyword">for</span> outdated production, optional, development, peer and bundled dependencies <span class="keyword">for</span> <span class="string">&quot;/Users/xdj/Documents/Hexo/package.json&quot;</span>...</span><br><span class="line">[====================] 13/13 100%</span><br><span class="line"></span><br><span class="line">New versions of active modules available:</span><br><span class="line"></span><br><span class="line">  hexo                      ^4.2.0   →   ^7.2.0</span><br><span class="line">  hexo-cli                  ^3.1.0   →   ^4.3.2</span><br><span class="line">  hexo-deployer-git         ^2.1.0   →   ^4.0.0</span><br><span class="line">  hexo-generator-archive    ^1.0.0   →   ^2.0.0</span><br><span class="line">  hexo-generator-category   ^1.0.0   →   ^2.0.0</span><br><span class="line">  hexo-generator-index      ^1.0.0   →   ^3.0.0</span><br><span class="line">  hexo-generator-searchdb   ^1.2.0   →   ^1.4.1</span><br><span class="line">  hexo-generator-tag        ^1.0.0   →   ^2.0.0</span><br><span class="line">  hexo-renderer-ejs         ^1.0.0   →   ^2.0.0</span><br><span class="line">  hexo-renderer-marked      ^2.0.0   →   ^6.3.0</span><br><span class="line">  hexo-renderer-stylus      ^1.1.0   →   ^3.0.1</span><br><span class="line">  hexo-server               ^1.0.0   →   ^3.0.0</span><br><span class="line"></span><br><span class="line">? Update <span class="string">&quot;hexo&quot;</span> <span class="keyword">in</span> package.json from ^4.2.0 to ^7.2.0? Yes</span><br><span class="line"></span><br><span class="line">? Update <span class="string">&quot;hexo-cli&quot;</span> <span class="keyword">in</span> package.json from ^3.1.0 to ^4.3.2? (Use arrow keys)</span><br><span class="line">❯ Yes</span><br><span class="line">  No</span><br><span class="line">  Show changelog</span><br><span class="line">  Ignore</span><br><span class="line">  Finish update process</span><br></pre></td></tr></table></figure></li>
</ul>
<p>一路<code>yes</code>即可</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>node</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux压缩及解压命令</title>
    <url>/2019/12/10/terminal/%E5%8E%8B%E7%BC%A9%E5%8F%8A%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压到当前目录</span></span><br><span class="line">$ tar -zxvf apache-kylin-2.6.4-bin-cdh57.tar.gz</span><br><span class="line"><span class="comment"># 解压到指定目录(指定命令选项`-C`),如果指定目录不存在，需要先新建目录</span></span><br><span class="line">$ tar -zxvf apache-kylin-2.6.4-bin-cdh57.tar.gz -C ../Applications</span><br></pre></td></tr></table></figure>

<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>tar可以保留文件的权限信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zcvf kylin-2.5.2.tar.gz kylin</span><br></pre></td></tr></table></figure>

<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><h3 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip -o -d /home/sunny myfile.zip</span><br></pre></td></tr></table></figure>
<p>把 myfile.zip 文件解压到 &#x2F;home&#x2F;sunny&#x2F;<br>-o:  不提示的情况下覆盖文件；<br>-d: -d &#x2F;home&#x2F;sunny 指明将文件解压缩到&#x2F;home&#x2F;sunny目录下；</p>
<blockquote>
<p>相关资料<br><a href="https://www.zhihu.com/question/335911358">为什么 Linux 要用 tar.gz，很少用 7Z 或 ZIP？</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
        <category>terminal</category>
      </categories>
  </entry>
</search>
